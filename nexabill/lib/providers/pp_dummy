import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/material.dart';
import 'package:flutter_image_compress/flutter_image_compress.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:image_picker/image_picker.dart';
import 'package:nexabill/ui/screens/home_screen.dart';
import 'package:path_provider/path_provider.dart';

/// **Profile Fetching Provider with Retry Logic**
final profileFutureProvider = FutureProvider<Map<String, dynamic>>((ref) async {
  User? user = FirebaseAuth.instance.currentUser;
  if (user == null) throw Exception("User not logged in");

  DocumentSnapshot userDoc =
      await FirebaseFirestore.instance.collection("users").doc(user.uid).get();

  if (userDoc.exists) {
    final data = userDoc.data() as Map<String, dynamic>;

    // ‚úÖ Update Gender & State Persistently
    ref.read(selectedGenderProvider.notifier).state = data["gender"] ?? "Male";
    ref.read(selectedStateProvider.notifier).state = data["state"] ?? "";

    return data;
  }

  throw Exception("User profile not found");
});

/// **StateNotifierProvider for Profile Editing**
final profileNotifierProvider =
    StateNotifierProvider<ProfileNotifier, ProfileState>((ref) {
      return ProfileNotifier();
    });

/// **State Providers for Gender & State Selection**
// final selectedGenderProvider = StateProvider<String>((ref) => "Male");
/// **State Providers for Gender & State Selection**
final selectedGenderProvider = StateProvider<String>((ref) {
  return "Male"; // Default to Male but should update from Firebase
});
// final selectedStateProvider = StateProvider<String?>(
//   (ref) => null,
// ); // Default is null (Hint text)
final selectedStateProvider = StateProvider<String?>((ref) {
  return null; // Default to null but should update from Firebase
});

/// **Profile Notifier**

class ProfileNotifier extends StateNotifier<ProfileState> {
  ProfileNotifier() : super(ProfileState.initial());

  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseDatabase _database = FirebaseDatabase.instance;

  /// **üìå Load Profile Data from Firebase Realtime Database & Firestore**
  Future<void> loadProfile(WidgetRef ref) async {
    User? user = _auth.currentUser;
    if (user == null) {
      state = ProfileState.error("User not logged in");
      return;
    }

    try {
      state = state.copyWith(isLoading: true);

      // ‚úÖ Fetch user data from Firestore
      DocumentSnapshot userDoc =
          await _firestore.collection("users").doc(user.uid).get();
      Map<String, dynamic>? userData = userDoc.data() as Map<String, dynamic>?;

      if (userData == null) {
        state = ProfileState.error("User profile not found");
        return;
      }

      // ‚úÖ Update Gender & State in Riverpod
      ref.read(selectedGenderProvider.notifier).state =
          userData["gender"] ?? "Male";

      ref.read(selectedStateProvider.notifier).state =
          userData["state"] ?? null;

      // ‚úÖ Fetch Base64 Image String from Firestore
      String? base64Image = userData["profileImageUrl"];

      // ‚úÖ Decode Base64 Image
      File? decodedImage;
      if (base64Image != null && base64Image.isNotEmpty) {
        decodedImage = await decodeBase64ToImage(base64Image);
      }

      // ‚úÖ Update ProfileState
      state = ProfileState.loaded(
        fullName: userData["fullName"] ?? "",
        phoneNumber: userData["phoneNumber"] ?? "",
        email: user.email ?? "",
        gender: userData["gender"] ?? "Male",
        dob:
            userData["dob"] != null ? DateTime.tryParse(userData["dob"]) : null,
        address: userData["address"] ?? "",
        city: userData["city"] ?? "",
        selectedState: userData["state"] ?? "",
        pin: userData["pin"] ?? "",
        profileImage: decodedImage, // ‚úÖ Set decoded image
        profileImageUrl: base64Image ?? "", // ‚úÖ Store Base64 Image String
        isProfileComplete: userData["isProfileComplete"] ?? false,
      );

      debugPrint("‚úÖ Profile data and gender restored successfully.");
    } catch (e) {
      state = ProfileState.error("Error loading profile: ${e.toString()}");
    }
  }

  /// **üìå Pick Image and Convert to Base64**
  Future<void> pickAndUploadImage(WidgetRef ref) async {
    final pickedFile = await ImagePicker().pickImage(
      source: ImageSource.gallery,
    );
    if (pickedFile == null) return;

    File imageFile = File(pickedFile.path);

    // ‚úÖ Compress Image Before Converting to Base64
    List<int> compressedImageBytes = await _compressImage(imageFile);

    // ‚úÖ Convert to Base64
    String base64String = base64Encode(compressedImageBytes);

    // ‚úÖ Save Base64 Image to Firestore & Realtime Database
    await uploadProfileImage(base64String, ref);
  }

  /// **Compress image to reduce size under 1MB**
  Future<List<int>> _compressImage(File imageFile) async {
    Uint8List? compressedBytes = await FlutterImageCompress.compressWithFile(
      imageFile.absolute.path,
      quality: 40, // Adjust quality (40 = decent quality, smaller size)
      format: CompressFormat.jpeg, // Use JPEG for better compression
    );

    return compressedBytes ?? await imageFile.readAsBytes();
  }

  Future<void> uploadProfileImage(String base64String, WidgetRef ref) async {
    try {
      User? user = FirebaseAuth.instance.currentUser;
      if (user == null) return;

      DatabaseReference userRef = FirebaseDatabase.instance
          .ref()
          .child("users")
          .child(user.uid);

      // ‚úÖ Update in Realtime Database
      await userRef.update({"profileImageBase64": base64String});

      // ‚úÖ Update in Firestore
      await FirebaseFirestore.instance.collection("users").doc(user.uid).update(
        {"profileImageUrl": base64String},
      );

      // // ‚úÖ Update State Locally
      // state = state.copyWith(profileImageUrl: base64String);

      // ‚úÖ Add this to update state.profileImage after updating profileImageUrl
      File? decodedImage = await decodeBase64ToImage(base64String);
      state = state.copyWith(
        profileImageUrl: base64String,
        profileImage: decodedImage,
      );

      // ‚úÖ Force Providers to Refresh UI
      ref.invalidate(profileFutureProvider);
      ref.invalidate(profileNotifierProvider);

      debugPrint("‚úÖ Profile image updated and state refreshed!");
    } catch (e) {
      debugPrint("‚ùå Error updating profile image: ${e.toString()}");
    }
  }

  /// **üìå Upload Image to Firebase Storage & Save URL in Firestore**
  Future<void> uploadProfileImageToRealtimeDatabase(File imageFile) async {
    try {
      User? user = FirebaseAuth.instance.currentUser;
      if (user == null) return;

      // ‚úÖ Convert Image to Base64
      List<int> imageBytes = await imageFile.readAsBytes();
      String base64String = base64Encode(imageBytes);

      // ‚úÖ Validate Base64 Length (Must be <1MB)
      if (base64String.length > 1 * 1024 * 1024) {
        debugPrint("‚ùå Base64 string too large for Firestore");
        return;
      }

      // ‚úÖ Save Base64 Image to Realtime Database
      DatabaseReference userRef = FirebaseDatabase.instance
          .ref()
          .child("users")
          .child(user.uid);
      await userRef.update({
        "profileImageBase64": base64String, // üî• Store Image as Base64 String
      });

      // ‚úÖ Ensure Firestore only gets a **string** and not an invalid type
      await FirebaseFirestore.instance.collection("users").doc(user.uid).update(
        {
          "profileImageUrl":
              base64String, // üî• Store Base64 String in Firestore
        },
      );

      // ‚úÖ Update state
      state = state.copyWith(profileImageUrl: base64String);

      debugPrint(
        "‚úÖ Profile image saved successfully in Realtime Database & Firestore",
      );
    } catch (e) {
      debugPrint("‚ùå Error uploading profile image: ${e.toString()}");
    }
  }

  /// **üìå Convert Base64 String to File**
  Future<File?> decodeBase64ToImage(String base64String) async {
    try {
      if (base64String.isEmpty) return null;

      // ‚úÖ Fix Incorrect Padding by ensuring Base64 length is a multiple of 4
      while (base64String.length % 4 != 0) {
        base64String += '=';
      }

      // ‚úÖ Decode Image Bytes
      List<int> imageBytes = base64Decode(base64String);

      // ‚úÖ Save to Temporary Directory
      final tempDir = await getTemporaryDirectory();
      final imageFile = File('${tempDir.path}/profile_image.png');
      await imageFile.writeAsBytes(imageBytes);

      debugPrint("‚úÖ Profile image decoded successfully");
      return imageFile;
    } catch (e) {
      debugPrint("‚ùå Error decoding Base64 image: ${e.toString()}");
      return null;
    }
  }

  /// **Update a Specific Field Without Resetting Others**
  void updateProfileField(String fieldName, dynamic fieldValue, WidgetRef ref) {
    if (fieldName == "gender") {
      ref.read(selectedGenderProvider.notifier).state = fieldValue;
    }

    if (fieldName == "selectedState") {
      ref.read(selectedStateProvider.notifier).state = fieldValue;
    }

    state = state.copyWith(
      isLoading: false,
      errorMessage: state.errorMessage,
      fullName: fieldName == "fullName" ? fieldValue : state.fullName,
      phoneNumber: fieldName == "phoneNumber" ? fieldValue : state.phoneNumber,
      gender: fieldName == "gender" ? fieldValue : state.gender,
      dob: fieldName == "dob" ? fieldValue : state.dob,
      address: fieldName == "address" ? fieldValue : state.address,
      city: fieldName == "city" ? fieldValue : state.city,
      selectedState:
          fieldName == "selectedState" ? fieldValue : state.selectedState,
      pin: fieldName == "pin" ? fieldValue : state.pin,
      profileImage: state.profileImage, // ‚úÖ Retain existing profile image
      isProfileComplete: state.isProfileComplete, // ‚úÖ Retain existing value
    );
  }

  Future<void> saveProfile(BuildContext context, WidgetRef ref) async {
    User? user = FirebaseAuth.instance.currentUser;
    if (user == null) {
      state = ProfileState.error("User not logged in");
      return;
    }

    try {
      state = state.copyWith(isLoading: true);

      // ‚úÖ Fetch Latest Data Before Saving
      final Map<String, dynamic> updatedProfileData = {
        "fullName": state.fullName.trim(),
        "phoneNumber": state.phoneNumber.trim(),
        "gender": state.gender,
        "dob": state.dob?.toIso8601String() ?? "",
        "address": state.address.trim(),
        "city": state.city.trim(),
        "state": state.selectedState?.trim() ?? "",
        "pin": state.pin.trim(),
        // "profileImageUrl": state.profileImageUrl, // ‚úÖ Save Image URL
      };
      // ‚úÖ Ensure profileImageUrl is not empty before saving
      if (state.profileImageUrl.isNotEmpty) {
        updatedProfileData["profileImageUrl"] = state.profileImageUrl;
      }

      // ‚úÖ Ensure all fields are properly filled to mark as complete
      bool isComplete = updatedProfileData.values.every(
        (value) => value != null && value.toString().trim().isNotEmpty,
      );

      // ‚úÖ Store isProfileComplete as a boolean
      updatedProfileData["isProfileComplete"] = isComplete;

      // ‚úÖ Save Data to Firestore with Merge
      await FirebaseFirestore.instance
          .collection("users")
          .doc(user.uid)
          .set(
            updatedProfileData,
            SetOptions(merge: true), // ‚úÖ Prevents overwriting existing data
          );

      // ‚úÖ Save Data to Realtime Database
      await _database
          .ref()
          .child("users")
          .child(user.uid)
          .update(updatedProfileData);

      // ‚úÖ Update State with Saved Data
      state = state.copyWith(
        isLoading: false,
        isProfileComplete: isComplete, // ‚úÖ Ensure boolean is used here
      );

      debugPrint("‚úÖ Profile saved successfully: $updatedProfileData");

      // ‚úÖ Rebuild UI & Navigate if Profile is Complete
      if (isComplete) {
        // Future.delayed(const Duration(milliseconds: 500), () {
        //   Navigator.pushReplacement(
        //     context,
        //     MaterialPageRoute(builder: (context) => const HomeScreen()),
        //   );
        // });
        await Future.delayed(const Duration(milliseconds: 500));
        if (context.mounted) {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (context) => const HomeScreen()),
          );
        }
      }
    } catch (e) {
      state = ProfileState.error("Error saving profile: ${e.toString()}");
    }
  }

  Future<void> pickImage(WidgetRef ref) async {
    final pickedFile = await ImagePicker().pickImage(
      source: ImageSource.gallery,
    );
    if (pickedFile != null) {
      File imageFile = File(pickedFile.path);
      state = state.copyWith(profileImage: imageFile);

      // ‚úÖ Convert image to Base64
      List<int> imageBytes = await imageFile.readAsBytes();
      String base64String = base64Encode(imageBytes);

      // ‚úÖ Upload and refresh state
      await uploadProfileImage(base64String, ref);
    }
  }
}

/// **Profile State Class**

class ProfileState {
  final bool isLoading;
  final String? errorMessage;
  final String fullName;
  final String phoneNumber;
  final String email;
  final String gender;
  final DateTime? dob;
  final String address;
  final String city;
  final String selectedState;
  final String pin;
  final File? profileImage; // ‚úÖ Local image file (for selection)
  final String profileImageUrl; // ‚úÖ Firebase Storage image URL
  final bool isProfileComplete; // ‚úÖ Profile completion status

  ProfileState({
    required this.isLoading,
    this.errorMessage,
    required this.fullName,
    required this.phoneNumber,
    required this.email,
    required this.gender,
    this.dob,
    required this.address,
    required this.city,
    required this.selectedState,
    required this.pin,
    this.profileImage,
    required this.profileImageUrl,
    required this.isProfileComplete,
  });

  /// **‚úÖ Convert ProfileState to JSON for Firestore**
  Map<String, dynamic> toJson() {
    return {
      "fullName": fullName,
      "phoneNumber": phoneNumber,
      "email": email,
      "gender": gender,
      "dob": dob?.toIso8601String(),
      "address": address,
      "city": city,
      "selectedState": selectedState,
      "pin": pin,
      "profileImageUrl": profileImageUrl, // ‚úÖ Include Image URL
      "isProfileComplete": isProfileComplete,
    };
  }

  /// **‚úÖ Create ProfileState from JSON (Firestore)**
  factory ProfileState.fromJson(Map<String, dynamic> json) {
    return ProfileState(
      isLoading: false,
      errorMessage: null,
      fullName: json["fullName"] ?? "",
      phoneNumber: json["phoneNumber"] ?? "",
      email: json["email"] ?? "",
      gender: json["gender"] ?? "Male",
      dob: json["dob"] != null ? DateTime.tryParse(json["dob"]) : null,
      address: json["address"] ?? "",
      city: json["city"] ?? "",
      selectedState: json["selectedState"] ?? "",
      pin: json["pin"] ?? "",
      profileImage: null, // ‚úÖ Profile image is stored locally, not in Firestore
      profileImageUrl: json["profileImageUrl"] ?? "", // ‚úÖ Fetch Image URL
      isProfileComplete: json["isProfileComplete"] ?? false,
    );
  }

  /// **‚úÖ Initial State**
  factory ProfileState.initial() {
    return ProfileState(
      isLoading: false,
      errorMessage: null,
      fullName: "",
      phoneNumber: "",
      email: "",
      gender: "Male",
      dob: null,
      address: "",
      city: "",
      selectedState: "",
      pin: "",
      profileImage: null,
      profileImageUrl: "", // ‚úÖ No image initially
      isProfileComplete: false, // ‚úÖ Default to false
    );
  }

  /// **‚úÖ Loaded State**
  factory ProfileState.loaded({
    required String fullName,
    required String phoneNumber,
    required String email,
    required String gender,
    DateTime? dob,
    required String address,
    required String city,
    required String selectedState,
    required String pin,
    File? profileImage,
    String profileImageUrl = "", // ‚úÖ Default to empty URL
    bool isProfileComplete = false, // ‚úÖ Default value
  }) {
    return ProfileState(
      isLoading: false,
      errorMessage: null,
      fullName: fullName,
      phoneNumber: phoneNumber,
      email: email,
      gender: gender,
      dob: dob,
      address: address,
      city: city,
      selectedState: selectedState,
      pin: pin,
      profileImage: profileImage,
      profileImageUrl: profileImageUrl, // ‚úÖ Ensure URL persists
      isProfileComplete: isProfileComplete,
    );
  }

  /// **‚úÖ Error State**
  factory ProfileState.error(String message) {
    return ProfileState(
      isLoading: false,
      errorMessage: message,
      fullName: "",
      phoneNumber: "",
      email: "",
      gender: "Male",
      dob: null,
      address: "",
      city: "",
      selectedState: "",
      pin: "",
      profileImage: null,
      profileImageUrl: "",
      isProfileComplete: false, // ‚úÖ Ensure a default value is set
    );
  }

  /// **‚úÖ CopyWith Method - Updates Individual Fields Without Resetting Others**
  ProfileState copyWith({
    bool? isLoading,
    String? errorMessage,
    String? fullName,
    String? phoneNumber,
    String? email,
    String? gender,
    DateTime? dob,
    String? address,
    String? city,
    String? selectedState,
    String? pin,
    File? profileImage,
    String? profileImageUrl, // ‚úÖ Support image URL updates
    bool? isProfileComplete,
  }) {
    return ProfileState(
      isLoading: isLoading ?? this.isLoading,
      errorMessage: errorMessage ?? this.errorMessage,
      fullName: fullName ?? this.fullName,
      phoneNumber: phoneNumber ?? this.phoneNumber,
      email: email ?? this.email,
      gender: gender ?? this.gender,
      dob: dob ?? this.dob,
      address: address ?? this.address,
      city: city ?? this.city,
      selectedState: selectedState ?? this.selectedState,
      pin: pin ?? this.pin,
      profileImage: profileImage ?? this.profileImage,
      profileImageUrl:
          profileImageUrl ?? this.profileImageUrl, // ‚úÖ Persist Image URL
      isProfileComplete: isProfileComplete ?? this.isProfileComplete,
    );
  }
}

// import 'dart:async';
// import 'dart:convert';
// import 'dart:io';
// import 'package:firebase_database/firebase_database.dart';
// import 'package:flutter/material.dart';
// import 'package:flutter_riverpod/flutter_riverpod.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:image_picker/image_picker.dart';
// import 'package:nexabill/ui/screens/home_screen.dart';
// import 'package:path_provider/path_provider.dart';

// /// **Profile Fetching Provider with Retry Logic**
// // final profileFutureProvider = FutureProvider<Map<String, dynamic>>((ref) async {
// //   User? user = FirebaseAuth.instance.currentUser;
// //   if (user == null) {
// //     throw Exception("User not logged in");
// //   }

// //   const int maxRetries = 5;
// //   int attempt = 0;

// //   while (attempt < maxRetries) {
// //     DocumentSnapshot userDoc =
// //         await FirebaseFirestore.instance
// //             .collection("users")
// //             .doc(user.uid)
// //             .get();

// //     if (userDoc.exists) {
// //       return userDoc.data() as Map<String, dynamic>;
// //     }

// //     attempt++;
// //     await Future.delayed(const Duration(seconds: 1));
// //   }

// //   throw Exception("User profile not found after retries");
// // });

// /// **Profile Fetching Provider with Retry Logic**
// final profileFutureProvider = FutureProvider<Map<String, dynamic>>((ref) async {
//   User? user = FirebaseAuth.instance.currentUser;
//   if (user == null) {
//     throw Exception("User not logged in");
//   }

//   DocumentSnapshot userDoc =
//       await FirebaseFirestore.instance.collection("users").doc(user.uid).get();

//   if (userDoc.exists) {
//     final data = userDoc.data() as Map<String, dynamic>;

//     // ‚úÖ Update Gender State from Firebase
//     if (data.containsKey("gender")) {
//       ref.read(selectedGenderProvider.notifier).state = data["gender"];
//     }

//     // ‚úÖ Update State Selection from Firebase
//     if (data.containsKey("state")) {
//       ref.read(selectedStateProvider.notifier).state = data["state"];
//     }

//     return data;
//   }

//   throw Exception("User profile not found");
// });

// /// **StateNotifierProvider for Profile Editing**
// final profileNotifierProvider =
//     StateNotifierProvider<ProfileNotifier, ProfileState>((ref) {
//       return ProfileNotifier();
//     });

// /// **State Providers for Gender & State Selection**
// // final selectedGenderProvider = StateProvider<String>((ref) => "Male");
// /// **State Providers for Gender & State Selection**
// final selectedGenderProvider = StateProvider<String>((ref) {
//   return "Male"; // Default to Male but should update from Firebase
// });
// // final selectedStateProvider = StateProvider<String?>(
// //   (ref) => null,
// // ); // Default is null (Hint text)
// final selectedStateProvider = StateProvider<String?>((ref) {
//   return null; // Default to null but should update from Firebase
// });

// /// **Profile Notifier**

// class ProfileNotifier extends StateNotifier<ProfileState> {
//   ProfileNotifier() : super(ProfileState.initial());

//   final FirebaseAuth _auth = FirebaseAuth.instance;
//   final FirebaseFirestore _firestore = FirebaseFirestore.instance;
//   final FirebaseDatabase _database = FirebaseDatabase.instance;

//   /// **üìå Load Profile Data from Firebase Realtime Database & Firestore**
//   Future<void> loadProfile() async {
//     User? user = _auth.currentUser;
//     if (user == null) {
//       state = ProfileState.error("User not logged in");
//       return;
//     }

//     try {
//       state = state.copyWith(isLoading: true);

//       // ‚úÖ Fetch user data from Firestore
//       DocumentSnapshot userDoc =
//           await _firestore.collection("users").doc(user.uid).get();
//       Map<String, dynamic>? userData = userDoc.data() as Map<String, dynamic>?;

//       if (userData == null) {
//         state = ProfileState.error("User profile not found");
//         return;
//       }

//       // ‚úÖ Fetch Base64 Image String from Firestore
//       String? base64Image = userData["profileImageUrl"];

//       // ‚úÖ Decode the Base64 string into a File
//       File? decodedImage;
//       if (base64Image != null && base64Image.isNotEmpty) {
//         decodedImage = await decodeBase64ToImage(base64Image);
//       }

//       // ‚úÖ Update ProfileState with loaded data
//       state = ProfileState.loaded(
//         fullName: userData["fullName"] ?? "",
//         phoneNumber: userData["phoneNumber"] ?? "",
//         email: user.email ?? "",
//         gender: userData["gender"] ?? "Male",
//         dob:
//             userData["dob"] != null ? DateTime.tryParse(userData["dob"]) : null,
//         address: userData["address"] ?? "",
//         city: userData["city"] ?? "",
//         selectedState: userData["state"] ?? "",
//         pin: userData["pin"] ?? "",
//         profileImage: decodedImage, // ‚úÖ Set decoded image
//         profileImageUrl: base64Image ?? "", // ‚úÖ Store Base64 Image String
//         isProfileComplete: userData["isProfileComplete"] ?? false,
//       );

//       debugPrint("‚úÖ Profile image loaded successfully");
//     } catch (e) {
//       state = ProfileState.error("Error loading profile: ${e.toString()}");
//     }
//   }

//   /// **üìå Pick Image and Convert to Base64**
//   Future<void> pickAndUploadImage() async {
//     final pickedFile = await ImagePicker().pickImage(
//       source: ImageSource.gallery,
//     );
//     if (pickedFile == null) return;

//     File imageFile = File(pickedFile.path);
//     state = state.copyWith(profileImage: imageFile);

//     await uploadProfileImageToRealtimeDatabase(imageFile);
//   }

//   /// **üìå Convert Image to Base64 and Upload to Firebase Realtime Database & Firestore**
//   Future<void> uploadProfileImageToRealtimeDatabase(File imageFile) async {
//     try {
//       User? user = FirebaseAuth.instance.currentUser;
//       if (user == null) return;

//       // ‚úÖ Convert Image to Base64
//       List<int> imageBytes = await imageFile.readAsBytes();
//       String base64String = base64Encode(imageBytes);

//       // ‚úÖ Save Base64 Image to Realtime Database
//       DatabaseReference userRef = _database
//           .ref()
//           .child("users")
//           .child(user.uid);
//       await userRef.update({
//         "profileImageBase64": base64String, // üî• Store Image as Base64 String
//       });

//       // ‚úÖ Save the SAME Base64 String in Firestore
//       await _firestore.collection("users").doc(user.uid).update({
//         "profileImageUrl": base64String, // üî• Store Base64 String in Firestore
//       });

//       // ‚úÖ Update state
//       state = state.copyWith(profileImageUrl: base64String);

//       debugPrint(
//         "‚úÖ Profile image saved successfully in Realtime Database & Firestore",
//       );
//     } catch (e) {
//       debugPrint(
//         "‚ùå Error uploading profile image to Realtime Database: ${e.toString()}",
//       );
//     }
//   }

//   /// **üìå Convert Base64 String to File**
//   Future<File?> decodeBase64ToImage(String base64String) async {
//     try {
//       if (base64String.isEmpty) return null;

//       // ‚úÖ Fix Incorrect Padding by ensuring Base64 length is a multiple of 4
//       while (base64String.length % 4 != 0) {
//         base64String += '=';
//       }

//       // ‚úÖ Decode Image Bytes
//       List<int> imageBytes = base64Decode(base64String);

//       // ‚úÖ Save to Temporary Directory
//       final tempDir = await getTemporaryDirectory();
//       final imageFile = File('${tempDir.path}/profile_image.png');
//       await imageFile.writeAsBytes(imageBytes);

//       debugPrint("‚úÖ Profile image decoded successfully");
//       return imageFile;
//     } catch (e) {
//       debugPrint("‚ùå Error decoding Base64 image: ${e.toString()}");
//       return null;
//     }
//   }

//   /// **Update a Specific Field Without Resetting Others**
//   void updateProfileField(String fieldName, dynamic fieldValue) {
//     state = state.copyWith(
//       isLoading: false,
//       errorMessage: state.errorMessage,
//       fullName: fieldName == "fullName" ? fieldValue : state.fullName,
//       phoneNumber: fieldName == "phoneNumber" ? fieldValue : state.phoneNumber,
//       gender: fieldName == "gender" ? fieldValue : state.gender,
//       dob: fieldName == "dob" ? fieldValue : state.dob,
//       address: fieldName == "address" ? fieldValue : state.address,
//       city: fieldName == "city" ? fieldValue : state.city,
//       selectedState:
//           fieldName == "selectedState" ? fieldValue : state.selectedState,
//       pin: fieldName == "pin" ? fieldValue : state.pin,
//       profileImage: state.profileImage, // ‚úÖ Retain existing profile image
//       isProfileComplete: state.isProfileComplete, // ‚úÖ Retain existing value
//     );
//   }

//   Future<void> saveProfile(BuildContext context, WidgetRef ref) async {
//     User? user = FirebaseAuth.instance.currentUser;
//     if (user == null) {
//       state = ProfileState.error("User not logged in");
//       return;
//     }

//     try {
//       state = state.copyWith(isLoading: true);

//       // ‚úÖ Fetch Latest Data Before Saving
//       final Map<String, dynamic> updatedProfileData = {
//         "fullName": state.fullName.trim(),
//         "phoneNumber": state.phoneNumber.trim(),
//         "gender": state.gender,
//         "dob": state.dob?.toIso8601String() ?? "",
//         "address": state.address.trim(),
//         "city": state.city.trim(),
//         "state": state.selectedState?.trim() ?? "",
//         "pin": state.pin.trim(),
//         // "profileImageUrl": state.profileImageUrl, // ‚úÖ Save Image URL
//       };
//       // ‚úÖ Ensure profileImageUrl is not empty before saving
//       if (state.profileImageUrl.isNotEmpty) {
//         updatedProfileData["profileImageUrl"] = state.profileImageUrl;
//       }

//       // ‚úÖ Ensure all fields are properly filled to mark as complete
//       bool isComplete = updatedProfileData.values.every(
//         (value) => value != null && value.toString().trim().isNotEmpty,
//       );

//       // ‚úÖ Store isProfileComplete as a boolean
//       updatedProfileData["isProfileComplete"] = isComplete;

//       // ‚úÖ Save Data to Firestore with Merge
//       await FirebaseFirestore.instance
//           .collection("users")
//           .doc(user.uid)
//           .set(
//             updatedProfileData,
//             SetOptions(merge: true), // ‚úÖ Prevents overwriting existing data
//           );

//       // ‚úÖ Save Data to Realtime Database
//       await _database
//           .ref()
//           .child("users")
//           .child(user.uid)
//           .update(updatedProfileData);

//       // ‚úÖ Update State with Saved Data
//       state = state.copyWith(
//         isLoading: false,
//         isProfileComplete: isComplete, // ‚úÖ Ensure boolean is used here
//       );

//       debugPrint("‚úÖ Profile saved successfully: $updatedProfileData");

//       // ‚úÖ Rebuild UI & Navigate if Profile is Complete
//       if (isComplete) {
//         Future.delayed(const Duration(milliseconds: 500), () {
//           Navigator.pushReplacement(
//             context,
//             MaterialPageRoute(builder: (context) => const HomeScreen()),
//           );
//         });
//       }
//     } catch (e) {
//       state = ProfileState.error("Error saving profile: ${e.toString()}");
//     }
//   }

//   Future<void> pickImage() async {
//     final pickedFile = await ImagePicker().pickImage(
//       source: ImageSource.gallery,
//     );

//     if (pickedFile != null) {
//       File imageFile = File(pickedFile.path);

//       // ‚úÖ Update UI instantly with selected image
//       state = state.copyWith(profileImage: imageFile);

//       // ‚úÖ Upload to Firebase Realtime Database as Base64
//       await uploadProfileImageToRealtimeDatabase(imageFile);
//     }
//   }
// }

// /// **Profile State Class**

// class ProfileState {
//   final bool isLoading;
//   final String? errorMessage;
//   final String fullName;
//   final String phoneNumber;
//   final String email;
//   final String gender;
//   final DateTime? dob;
//   final String address;
//   final String city;
//   final String selectedState;
//   final String pin;
//   final File? profileImage; // ‚úÖ Local image file (for selection)
//   final String profileImageUrl; // ‚úÖ Firebase Storage image URL
//   final bool isProfileComplete; // ‚úÖ Profile completion status

//   ProfileState({
//     required this.isLoading,
//     this.errorMessage,
//     required this.fullName,
//     required this.phoneNumber,
//     required this.email,
//     required this.gender,
//     this.dob,
//     required this.address,
//     required this.city,
//     required this.selectedState,
//     required this.pin,
//     this.profileImage,
//     required this.profileImageUrl,
//     required this.isProfileComplete,
//   });

//   /// **‚úÖ Convert ProfileState to JSON for Firestore**
//   Map<String, dynamic> toJson() {
//     return {
//       "fullName": fullName,
//       "phoneNumber": phoneNumber,
//       "email": email,
//       "gender": gender,
//       "dob": dob?.toIso8601String(),
//       "address": address,
//       "city": city,
//       "selectedState": selectedState,
//       "pin": pin,
//       "profileImageUrl": profileImageUrl, // ‚úÖ Include Image URL
//       "isProfileComplete": isProfileComplete,
//     };
//   }

//   /// **‚úÖ Create ProfileState from JSON (Firestore)**
//   factory ProfileState.fromJson(Map<String, dynamic> json) {
//     return ProfileState(
//       isLoading: false,
//       errorMessage: null,
//       fullName: json["fullName"] ?? "",
//       phoneNumber: json["phoneNumber"] ?? "",
//       email: json["email"] ?? "",
//       gender: json["gender"] ?? "Male",
//       dob: json["dob"] != null ? DateTime.tryParse(json["dob"]) : null,
//       address: json["address"] ?? "",
//       city: json["city"] ?? "",
//       selectedState: json["selectedState"] ?? "",
//       pin: json["pin"] ?? "",
//       profileImage: null, // ‚úÖ Profile image is stored locally, not in Firestore
//       profileImageUrl: json["profileImageUrl"] ?? "", // ‚úÖ Fetch Image URL
//       isProfileComplete: json["isProfileComplete"] ?? false,
//     );
//   }

//   /// **‚úÖ Initial State**
//   factory ProfileState.initial() {
//     return ProfileState(
//       isLoading: false,
//       errorMessage: null,
//       fullName: "",
//       phoneNumber: "",
//       email: "",
//       gender: "Male",
//       dob: null,
//       address: "",
//       city: "",
//       selectedState: "",
//       pin: "",
//       profileImage: null,
//       profileImageUrl: "", // ‚úÖ No image initially
//       isProfileComplete: false, // ‚úÖ Default to false
//     );
//   }

//   /// **‚úÖ Loaded State**
//   factory ProfileState.loaded({
//     required String fullName,
//     required String phoneNumber,
//     required String email,
//     required String gender,
//     DateTime? dob,
//     required String address,
//     required String city,
//     required String selectedState,
//     required String pin,
//     File? profileImage,
//     String profileImageUrl = "", // ‚úÖ Default to empty URL
//     bool isProfileComplete = false, // ‚úÖ Default value
//   }) {
//     return ProfileState(
//       isLoading: false,
//       errorMessage: null,
//       fullName: fullName,
//       phoneNumber: phoneNumber,
//       email: email,
//       gender: gender,
//       dob: dob,
//       address: address,
//       city: city,
//       selectedState: selectedState,
//       pin: pin,
//       profileImage: profileImage,
//       profileImageUrl: profileImageUrl, // ‚úÖ Ensure URL persists
//       isProfileComplete: isProfileComplete,
//     );
//   }

//   /// **‚úÖ Error State**
//   factory ProfileState.error(String message) {
//     return ProfileState(
//       isLoading: false,
//       errorMessage: message,
//       fullName: "",
//       phoneNumber: "",
//       email: "",
//       gender: "Male",
//       dob: null,
//       address: "",
//       city: "",
//       selectedState: "",
//       pin: "",
//       profileImage: null,
//       profileImageUrl: "",
//       isProfileComplete: false, // ‚úÖ Ensure a default value is set
//     );
//   }

//   /// **‚úÖ CopyWith Method - Updates Individual Fields Without Resetting Others**
//   ProfileState copyWith({
//     bool? isLoading,
//     String? errorMessage,
//     String? fullName,
//     String? phoneNumber,
//     String? email,
//     String? gender,
//     DateTime? dob,
//     String? address,
//     String? city,
//     String? selectedState,
//     String? pin,
//     File? profileImage,
//     String? profileImageUrl, // ‚úÖ Support image URL updates
//     bool? isProfileComplete,
//   }) {
//     return ProfileState(
//       isLoading: isLoading ?? this.isLoading,
//       errorMessage: errorMessage ?? this.errorMessage,
//       fullName: fullName ?? this.fullName,
//       phoneNumber: phoneNumber ?? this.phoneNumber,
//       email: email ?? this.email,
//       gender: gender ?? this.gender,
//       dob: dob ?? this.dob,
//       address: address ?? this.address,
//       city: city ?? this.city,
//       selectedState: selectedState ?? this.selectedState,
//       pin: pin ?? this.pin,
//       profileImage: profileImage ?? this.profileImage,
//       profileImageUrl:
//           profileImageUrl ?? this.profileImageUrl, // ‚úÖ Persist Image URL
//       isProfileComplete: isProfileComplete ?? this.isProfileComplete,
//     );
//   }
// }
